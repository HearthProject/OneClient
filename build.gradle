import java.security.MessageDigest
import org.apache.commons.net.ftp.FTPClient
import org.apache.commons.net.ftp.FTP
import groovy.json.JsonOutput

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		jcenter()
	}
	dependencies {
		classpath 'commons-net:commons-net:3.3'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'


apply from: 'https://github.com/HearthProject/OneClient/raw/master/formatter/ideconfig.gradle'

sourceCompatibility = 1.8
version = '0.0.5'

// Fetch build number from Jenkins
def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

mainClassName = "com.hearthproject.oneclient.Launch"

repositories {
    mavenCentral()
	maven {
		url "https://libraries.minecraft.net/"
	}
}

configurations {
	shade
	compile.extendsFrom shade
}

dependencies {
    shade 'com.google.code.gson:gson:2.7'
	shade 'commons-io:commons-io:2.5'
	shade 'org.zeroturnaround:zt-zip:1.9'
	shade 'com.intellij:forms_rt:7.0.3'
	shade 'com.mashape.unirest:unirest-java:1.4.9'
	shade 'com.mojang:authlib:1.5.16'
	shade 'org.piwik.java.tracking:piwik-java-tracker:1.2'
	shade 'net.lingala.zip4j:zip4j:1.3.2'
	shade 'org.jsoup:jsoup:1.10.3'
	shade 'org.apache.logging.log4j:log4j-api:2.8.2'
	shade 'org.apache.logging.log4j:log4j-core:2.8.2'
	shade 'org.controlsfx:controlsfx:8.40.13'
	shade 'com.jfoenix:jfoenix:1.7.0'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'OneClient',
                'Implementation-Version': version,
                'Main-Class': 'com.hearthproject.oneclient.Launch'
    }
    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }
}

task portableJar(type: Jar) {
	from sourceSets.main.output
	manifest {
		attributes 'Implementation-Title': 'OneClient',
			'Implementation-Version': version,
			'Main-Class': 'com.hearthproject.oneclient.LaunchPortable'
	}
	from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }
	classifier = "portable"
}

artifacts {
	archives portableJar
}

portableJar.mustRunAfter jar

task saveHash(dependsOn: jar) {
	doLast {
		GFileUtils.writeStringToFile(new File(jar.archivePath.getAbsolutePath() + ".sha1"), calcSha1(jar.archivePath))
		GFileUtils.writeStringToFile(new File(portableJar.archivePath.getAbsolutePath() + ".sha1"), calcSha1(portableJar.archivePath))
	}
}

def calcSha1(file)
{
	MessageDigest md = MessageDigest.getInstance("SHA-1");
	file.eachByte 4096, {bytes, size ->
		md.update(bytes, 0, size);
	}
	return md.digest().collect {String.format "%02x", it}.join();
}

build.finalizedBy saveHash

def uploadFileToCR(file, location){
	project.logger.lifecycle("Uploading " + file + " to creeperrepo")
	def ftp = new FTPClient()
	def host = project.getProperty('cr_host').toString()
	ftp.connect(host)
	ftp.login(project.getProperty('cr_user').toString(), project.getProperty('cr_pass').toString())
	ftp.setFileType(FTP.BINARY_FILE_TYPE)
	ftp.enterLocalPassiveMode()
	ftp.storeFile(location + "/" + file.name, new FileInputStream(file))
}

task crUpload(){
	doLast {
		if(isPublishBranch()){
			project.logger.lifecycle("Uploading to CR")
			uploadFileToCR(jar.archivePath, "oneclient/versions")
			uploadFileToCR(portableJar.archivePath, "oneclient/versions")
			uploadFileToCR(new File(jar.archivePath.getAbsolutePath() + ".sha1"), "oneclient/versions")
			uploadFileToCR(new File(portableJar.archivePath.getAbsolutePath() + ".sha1"), "oneclient/versions")
			uploadFileToCR(new File(portableJar.archivePath.getAbsolutePath() + ".sha1"), "oneclient/versions")
			uploadFileToCR(new File(project.getBuildDir().getPath() + "/libs/versions.json"), "oneclient")
		} else {
			project.logger.lifecycle("Skipping CR push as not release branch!")
		}
	}
}

task buildInfo() {
	doLast {
		def buildInfo = new TreeMap<String,Object>()
		buildInfo['latestVersion'] = project.version
		buildInfo['downloadUrl'] = "http://fdn.redstone.tech/theoneclient/oneclient/versions/" + jar.archivePath.name
		buildInfo['portableDownloadUrl'] = "http://fdn.redstone.tech/theoneclient/oneclient/versions/" + portableJar.archivePath.name
		buildInfo['required'] = "false"

		def jsonFile = new File(project.getBuildDir().getPath() + "/libs/versions.json")
		jsonFile.write JsonOutput.prettyPrint(JsonOutput.toJson(buildInfo))
	}
}

def isPublishBranch(){
	def ENV = System.getenv()
	if (ENV.BRANCH_NAME) {
		project.logger.lifecycle("Branch = ${System.getenv().BRANCH_NAME}")
		return "${System.getenv().BRANCH_NAME}" == "master"
	}
	project.logger.lifecycle("Branch varible could not be found!")
	return false
}

build.finalizedBy buildInfo